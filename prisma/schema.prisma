// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Settings {
  id        Int      @id @default(autoincrement())
  tax       Float    @default(0)
  currency  String   @default("BHD")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransactionCategory {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  type          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  transactionId Int?
  Transaction   Transaction[]
}

model Transaction {
  id                    Int                 @id @default(autoincrement())
  tableId               Int
  amount                Int                 @default(0)
  type                  String
  description           String?
  date                  DateTime            @default(now())
  qty                   Int                 @default(1)
  categoryId            TransactionCategory @relation(fields: [transactionCategoryId], references: [id])
  Note                  Note?               @relation(fields: [noteId], references: [id])
  noteId                Int?
  transactionCategoryId Int
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  phone     String   @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id           Int           @id @default(autoincrement())
  title        String
  total        Float?        @default(0)
  status       String?
  banner       String?
  active       Boolean       @default(true)
  updatedAt    DateTime      @updatedAt
  createdAt    DateTime      @default(now())
  customerId   String?
  transactions Transaction[]
}

model Stock {
  id        Int      @id @default(autoincrement())
  name      String
  quantity  Int      @default(0)
  price     Float    @default(0)
  revenue   Float    @default(0)
  barcode   String?
  code      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Asset {
  id        Int      @id @default(autoincrement())
  name      String
  quantity  Int      @default(0)
  price     Float    @default(0)
  barcode   String?
  code      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Employee {
  id         Int      @id @default(autoincrement())
  name       String
  role       String
  empId      String   @unique
  email      String   @unique
  phone      String   @unique
  department String?
  address    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Supplier {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String   @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  roleId        Int?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Privilege {
  id        Int      @id @default(autoincrement())
  create    Boolean  @default(false)
  read      Boolean  @default(false)
  update    Boolean  @default(false)
  delete    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
